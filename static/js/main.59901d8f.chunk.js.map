{"version":3,"sources":["Details.js","App.js","serviceWorker.js","index.js"],"names":["TYPES","type","option","TOOLTIPS","PAYD","VALU","EARL","FXDT","ENTL","TXFR","NETT","Details","react_default","a","createElement","Row_default","as","this","renderAccountsNumber","renderCurrency","renderDates","_this","findType","map","renderType","ast","parseFloat","toFixed","_this2","date","moment","format","fromNow","_this3","label","value","Fragment","OverlayTrigger_default","placement","overlay","Tooltip_default","Col_default","xs","attributes","details","props","parsedSwift","block4","filter","element","Component","parser","Swift","FALLBACK_FORMAT","App","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","orderJSON","transactionJSON","onOrderChange","bind","assertThisInitialized","onTransactionChange","event","target","setState","parse","lines","replace","split","block_1","block_2","block_3","block_4","slice","join","e","tryParse","message","Navbar_default","bg","variant","className","Brand","href","Container_default","Form_default","Group","controlId","Control","placeholder","rows","onChange","src_Details","JSONPretty_default","data","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wWAUMA,gBACc,CAACC,KAAM,KAAMC,OAAQ,MADnCF,EAEK,CAACC,KAAM,KAAMC,OAAQ,KAF1BF,EAGQ,CAACC,KAAM,KAAMC,OAAQ,KAG7BC,EAAW,CACfC,KAAQ,oBACRC,KAAQ,kBACRC,KAAQ,6BACRC,KAAQ,2BACRC,KAAQ,kBACRC,KAAQ,kBACRC,KAAQ,mBAoEKC,mLA/DX,OACEC,EAAAC,EAAAC,cAACC,EAAAF,EAAD,CAAKG,GAAG,MACLC,KAAKC,uBACLD,KAAKE,iBACLF,KAAKG,wDAKK,IAAAC,EAAAJ,KAGf,OAFcA,KAAKK,SAAStB,GAEfuB,IAAI,SAACtB,GAChB,OAAOoB,EAAKG,WAAWvB,EAAKwB,IAAL,UAAwBC,WAAWzB,EAAKwB,IAAL,QAAoBE,QAAQ,GAAK,IAAM1B,EAAKwB,IAAI,0DAIhG,IAAAG,EAAAX,KAGZ,OAFcA,KAAKK,SAAStB,GAEfuB,IAAI,SAACtB,GAChB,IAAM4B,EAAOC,IAAO7B,EAAKwB,IAAL,KAAkB,YACtC,OAAOG,EAAKJ,WAAWvB,EAAKwB,IAAL,UAAuBI,EAAKE,OAAO,cAAgB,KAAOF,EAAKG,UAAY,sDAI/E,IAAAC,EAAAhB,KAGrB,OAFcA,KAAKK,SAAStB,GAEfuB,IAAI,SAACtB,GAChB,OAAOgC,EAAKT,WAAW,mBAAqBvB,EAAKwB,IAAL,UAAwB,IAAMxB,EAAKwB,IAAI,wDAI5ES,EAAOC,GAEhB,OACEvB,EAAAC,EAAAC,cAACF,EAAAC,EAAMuB,SAAP,KACIxB,EAAAC,EAAAC,cAACuB,EAAAxB,EAAD,CACEyB,UAAU,OACVC,QACE3B,EAAAC,EAAAC,cAAC0B,EAAA3B,EAAD,KAAUV,EAAS+B,IAAU,mBAG/BtB,EAAAC,EAAAC,cAAC2B,EAAA5B,EAAD,CAAKG,GAAG,KAAK0B,GAAI,GAAIR,IAEzBtB,EAAAC,EAAAC,cAAC2B,EAAA5B,EAAD,CAAKG,GAAG,KAAK0B,GAAI,GAAIP,qCAKlBQ,GACP,IAAMC,EAAU3B,KAAK4B,MAAMC,YAAYC,OACvC,OAAGH,EACMA,EAAQI,OAAO,SAACC,GACrB,OAAOA,EAAQhD,OAAS0C,EAAW1C,MAAQgD,EAAQ/C,SAAWyC,EAAWzC,SAGpE,UA5DSgD,aChBhBC,EAAS,IAAIC,IAEbC,EAAkB,8FA0GTC,cApGb,SAAAA,EAAYT,GAAO,IAAAxB,EAAA,OAAAkC,OAAAC,EAAA,EAAAD,CAAAtC,KAAAqC,IACjBjC,EAAAkC,OAAAE,EAAA,EAAAF,CAAAtC,KAAAsC,OAAAG,EAAA,EAAAH,CAAAD,GAAAK,KAAA1C,KAAM4B,KACDe,MAAQ,CACXC,UAAW,GACXC,gBAAiB,IAGnBzC,EAAK0C,cAAgB1C,EAAK0C,cAAcC,KAAnBT,OAAAU,EAAA,EAAAV,CAAAlC,IACrBA,EAAK6C,oBAAsB7C,EAAK6C,oBAAoBF,KAAzBT,OAAAU,EAAA,EAAAV,CAAAlC,IARVA,6EAWL8C,GACZ,IAAMhC,EAAQgC,EAAMC,OAAOjC,MAC3BlB,KAAKoD,SAAS,CAACR,UAAW5C,KAAKqD,MAAMnC,iDAGnBgC,GAClB,IAAMhC,EAAQgC,EAAMC,OAAOjC,MAC3BlB,KAAKoD,SAAS,CAACP,gBAAiB7C,KAAKqD,MAAMnC,sCAGpCA,GAGP,IAAMoC,GADNpC,GADAA,EAAQA,EAAMqC,QAAQ,UAAW,OACnBA,QAAQ,MAAO,QACTC,MAAM,MACpBC,EAAU,MAAQH,EAAM,GAAK,IAC7BI,EAAU,MAAQJ,EAAM,GAAK,IAC7BK,EAAU,OAASL,EAAM,GAAK,KAC9BM,EAAU,QAAUN,EAAMO,MAAM,GAAGC,KAAK,MAAQ,OAEtD,OAAO5B,EAAOmB,MAAMI,EAAUC,EAAUC,EAAUC,iCAG9C1C,GACJ,IACE,OAAOgB,EAAOmB,MAAMnC,GACpB,MAAO6C,GACP,IACE,OAAO/D,KAAKgE,SAAS9C,GACrB,MAAO6C,GACP,IACE,OAAO/D,KAAKgE,SAAS5B,EAAkBlB,GACvC,MAAO6C,GACP,IACE,OAAO/D,KAAKgE,SAAS5B,EAAkB,MAAQlB,GAC/C,MAAO6C,GACP,OAAOA,EAAEE,6CAQjB,OACEtE,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACqE,EAAAtE,EAAD,CAAQuE,GAAG,OAAOC,QAAQ,OAAOC,UAAU,QACzC1E,EAAAC,EAAAC,cAACqE,EAAAtE,EAAO0E,MAAR,CAAcC,KAAK,SAChB,oBAGL5E,EAAAC,EAAAC,cAAC2E,EAAA5E,EAAD,CAAWyE,UAAU,QACrB1E,EAAAC,EAAAC,cAACC,EAAAF,EAAD,KACED,EAAAC,EAAAC,cAAC2B,EAAA5B,EAAD,KACED,EAAAC,EAAAC,cAAC4E,EAAA7E,EAAD,KACED,EAAAC,EAAAC,cAAC4E,EAAA7E,EAAK8E,MAAN,CAAYC,UAAU,gCACpBhF,EAAAC,EAAAC,cAAC4E,EAAA7E,EAAKgF,QAAN,CAAcC,YAAY,cAAc9E,GAAG,WAAW+E,KAAK,KAAKC,SAAU/E,KAAK8C,mBAIrFnD,EAAAC,EAAAC,cAAC2B,EAAA5B,EAAD,KACED,EAAAC,EAAAC,cAAC4E,EAAA7E,EAAD,KACED,EAAAC,EAAAC,cAAC4E,EAAA7E,EAAK8E,MAAN,CAAYC,UAAU,gCACpBhF,EAAAC,EAAAC,cAAC4E,EAAA7E,EAAKgF,QAAN,CAAcC,YAAY,oBAAoB9E,GAAG,WAAW+E,KAAK,KAAKC,SAAU/E,KAAKiD,0BAK3FtD,EAAAC,EAAAC,cAACC,EAAAF,EAAD,KACED,EAAAC,EAAAC,cAAC2B,EAAA5B,EAAD,CAAK6B,GAAI,GACP9B,EAAAC,EAAAC,cAACmF,EAAD,CAASnD,YAAa7B,KAAK2C,MAAMC,aAEnCjD,EAAAC,EAAAC,cAAC2B,EAAA5B,EAAD,CAAK6B,GAAI,GACP9B,EAAAC,EAAAC,cAACmF,EAAD,CAASnD,YAAa7B,KAAK2C,MAAME,oBAGvClD,EAAAC,EAAAC,cAACC,EAAAF,EAAD,KACED,EAAAC,EAAAC,cAAC2B,EAAA5B,EAAD,CAAK6B,GAAI,GACP9B,EAAAC,EAAAC,cAACoF,EAAArF,EAAD,CAAYsF,KAAMlF,KAAK2C,MAAMC,aAE/BjD,EAAAC,EAAAC,cAAC2B,EAAA5B,EAAD,CAAK6B,GAAI,GACP9B,EAAAC,EAAAC,cAACoF,EAAArF,EAAD,CAAYsF,KAAMlF,KAAK2C,MAAME,6BA7FvBZ,2BCJEkD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OAAO9F,EAAAC,EAAAC,cAAC6F,EAAD,MAASC,SAASC,eAAe,SDyH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.59901d8f.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport Col from 'react-bootstrap/Col';\nimport Row from 'react-bootstrap/Row';\nimport OverlayTrigger from 'react-bootstrap/OverlayTrigger'\nimport Tooltip from 'react-bootstrap/Tooltip'\nimport moment from 'moment';\nimport 'moment/locale/pl';\n\nimport './App.css';\n\nconst TYPES = {\n  \"Account number\": {type: \"97\", option: \"A\"},\n  \"Dates\": {type: \"98\", option: \"A\"},\n  \"Currency\": {type: \"19\", option: \"B\"}\n}\n\nconst TOOLTIPS = {\n  \"PAYD\": \"Payment Date/Time\",\n  \"VALU\": \"Value Date/Time\",\n  \"EARL\": \"Earliest Payment Date/Time\",\n  \"FXDT\": \"FX Rate Fixing Date/Time\",\n  \"ENTL\": \"Entitled Amount\",\n  \"TXFR\": \"Tax Free Amount\",\n  'NETT': \"Net Cash Amount\"\n}\n\nclass Details extends Component {\n  render() {\n    return (\n      <Row as=\"dl\">\n        {this.renderAccountsNumber()}\n        {this.renderCurrency()}\n        {this.renderDates()}\n      </Row>\n    )\n  }\n\n  renderCurrency() {\n    const types = this.findType(TYPES[\"Currency\"])\n\n    return types.map((type) => {\n      return this.renderType(type.ast[\"Qualifier\"],  parseFloat(type.ast[\"Amount\"]).toFixed(2) + \" \" + type.ast[\"Currency Code\"])\n    })\n  }\n\n  renderDates() {\n    const types = this.findType(TYPES[\"Dates\"])\n\n    return types.map((type) => {\n      const date = moment(type.ast[\"Date\"], \"YYYYMMDD\")\n      return this.renderType(type.ast[\"Qualifier\"], date.format('DD/MM/YYYY') + \" (\" + date.fromNow() + \")\")\n    })\n  }\n\n  renderAccountsNumber() {\n    const types = this.findType(TYPES[\"Account number\"])\n\n    return types.map((type) => {\n      return this.renderType(\"Account Number (\" + type.ast[\"Qualifier\"] + \")\" , type.ast[\"Account Number\"])\n    })\n  }\n\n  renderType(label, value) {\n\n    return (\n      <React.Fragment>\n          <OverlayTrigger\n            placement=\"left\"\n            overlay={\n              <Tooltip>{TOOLTIPS[label] || \"No information\"}</Tooltip>\n            }\n          >\n            <Col as=\"dt\" xs={5}>{label}</Col>\n          </OverlayTrigger>\n        <Col as=\"dd\" xs={7}>{value}</Col>\n      </React.Fragment>\n    )\n  }\n\n  findType(attributes) {\n    const details = this.props.parsedSwift.block4\n    if(details) {\n      return details.filter((element)=> {\n        return element.type === attributes.type && element.option === attributes.option\n      })\n    } else {\n      return []\n    }\n  }\n}\n\nexport default Details;\n","import React, { Component } from 'react';\nimport Navbar from 'react-bootstrap/Navbar';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Form from 'react-bootstrap/Form';\nimport Swift from 'swift-mock';\nimport JSONPretty from 'react-json-pretty';\nimport Details from './Details';\nimport './App.css';\nconst parser = new Swift();\n\nconst FALLBACK_FORMAT = \"F01TESTBIC12XXX0360105154\\n\" +\n  \"O5641057130214TESTBIC34XXX26264938281302141757N\\n\" +\n  \"108:2RDRQDHM3WO\"\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      orderJSON: {},\n      transactionJSON: {}\n    }\n\n    this.onOrderChange = this.onOrderChange.bind(this);\n    this.onTransactionChange = this.onTransactionChange.bind(this);\n  }\n\n  onOrderChange(event) {\n    const value = event.target.value\n    this.setState({orderJSON: this.parse(value)})\n  }\n\n  onTransactionChange(event) {\n    const value = event.target.value\n    this.setState({transactionJSON: this.parse(value)})\n  }\n\n  tryParse(value) {\n    value = value.replace(/\\n{2,}/g, '\\n')\n    value = value.replace(/ :/g, '\\n:')\n    const lines = value.split('\\n')\n    const block_1 = \"{1:\" + lines[0] + \"}\"\n    const block_2 = \"{2:\" + lines[1] + \"}\"\n    const block_3 = \"{3:{\" + lines[2] + \"}}\"\n    const block_4 = \"{4:\\n\" + lines.slice(3).join('\\n') + \"\\n-}\"\n\n    return parser.parse(block_1 + block_2 + block_3 + block_4)\n  }\n\n  parse(value) {\n    try {\n      return parser.parse(value)\n    } catch (e) {\n      try {\n        return this.tryParse(value)\n      } catch (e) {\n        try {\n          return this.tryParse(FALLBACK_FORMAT + value)\n        } catch (e) {\n          try {\n            return this.tryParse(FALLBACK_FORMAT + \":\\n\" + value)\n          } catch (e) {\n            return e.message\n          }\n        }\n      }\n    }\n  }\n\n  render() {\n    return (\n      <div>\n        <Navbar bg=\"dark\" variant=\"dark\" className=\"mb-2\">\n          <Navbar.Brand href=\"#home\">\n            {'Swift Validator'}\n          </Navbar.Brand>\n        </Navbar>\n        <Container className=\"mb-0\">\n        <Row>\n          <Col>\n            <Form>\n              <Form.Group controlId=\"exampleForm.ControlTextarea1\">\n                <Form.Control placeholder=\"Swift order\" as=\"textarea\" rows=\"20\" onChange={this.onOrderChange} />\n              </Form.Group>\n            </Form>\n          </Col>\n          <Col>\n            <Form>\n              <Form.Group controlId=\"exampleForm.ControlTextarea1\">\n                <Form.Control placeholder=\"Swift transaction\" as=\"textarea\" rows=\"20\" onChange={this.onTransactionChange} />\n              </Form.Group>\n            </Form>\n          </Col>\n        </Row>\n          <Row>\n            <Col xs={6}>\n              <Details parsedSwift={this.state.orderJSON}></Details>\n            </Col>\n            <Col xs={6}>\n              <Details parsedSwift={this.state.transactionJSON}></Details>\n            </Col>\n          </Row>\n        <Row>\n          <Col xs={6}>\n            <JSONPretty data={this.state.orderJSON} />\n          </Col>\n          <Col xs={6}>\n            <JSONPretty data={this.state.transactionJSON} />\n          </Col>\n        </Row>\n      </Container>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport 'react-json-pretty/themes/monikai.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}