{"version":3,"sources":["Details.js","Validator.js","App.js","serviceWorker.js","index.js","../../swift-mock/lib/swift.js","../../swift-mock/lib/finParser.js","../../swift-mock/lib/mtParser.js","../../swift-mock/lib/FieldRegexpFactory.js","../../swift-mock/lib/block1Parser.js","../../swift-mock/lib/block2Parser.js","../../swift-mock/lib/messageGenerator.js","../../swift-mock/lib/utils.js"],"names":["TYPES","type","option","FIELDS_DESCRIPTION","20","38J","83J","30T","30V","36","32B","53A","33B","58J","92B","TOOLTIPS","PAYD","VALU","EARL","FXDT","ENTL","TXFR","NETT","Details","_this","this","react_default","a","createElement","Row_default","as","renderAccountsNumber","renderCurrencyField","renderDates","renderCustomField","ast","getAccountNumberFromFin","renderField","renderRate","undefined","renderIdentification","renderDate","renderFloat","renderCurrency","name","split","map","item","i","key","find","line","includes","dateString","date","moment","format","fromNow","floatSting","precision","arguments","length","parseFloat","replace","toFixed","amount","currency","mapper","_this2","findType","field","renderType","_this3","join","_this4","_this5","_this6","label","value","Fragment","OverlayTrigger_default","placement","overlay","Tooltip_default","Col_default","xs","attributes","details","props","parsedSwift","block4","filter","element","Component","Validator","className","md","Badge_default","variant","validateNettAmount","validatePstaAmount","validateValueDate","validateTradeDate","validateRate","orderRate","orderJSON","rate","transactionJSON","buy","sell","computedRate","orderValue","transactionValue","orderValueDate","correctOrderValueDate","isAfter","validation","renderAmountValidator","valueLeft","valueRight","valid","badgeVariant","json","qualifier","parser","Swift","FALLBACK_FORMAT","App","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","onOrderChange","bind","assertThisInitialized","onTransactionChange","event","target","setState","parse","lines","block_1","block_2","block_3","block_4","slice","e","tryParse","message","Navbar_default","bg","Brand","href","Collapse","Text","process","Container_default","Form_default","Group","controlId","Control","placeholder","rows","onChange","src_Validator","src_Details","JSONPretty_default","data","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","src_App_0","document","getElementById","URL","origin","addEventListener","concat","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","_classCallCheck","__webpack_require__","_createClass","fs","path","finParser","mtParser","block1Parser","block2Parser","messageGenerator","_require","Logger","mkDirByPathSync","patterns","logger","options","fieldPatterns","JSON","readFileSync","resolve","cwd","inputFolder","in","outputFolder","out","setLogLevel","logLevel","setElastic","elastic","saveIncomingMessages","filters","filtersEvery","messages","persistent","deleteFiles","delete","predicate","callback","Error","debug","toString","push","trace","watcher","close","filenamePrefix","outPath","Array","isArray","generate","filePath","Promise","reject","writeFile","err","swiftMessage","humanizeBlocks","blocks","keys","forEach","block1","content","block2","extraBlocks","module","exports","peg","input","result","block","FieldParser","_result","fieldParser","from","index","fieldCode","parsedField","fieldValue","_toArray","XRegExp","parsePattern","FieldNamesParser","fieldNamesRegExp","fieldNamesString","names","escaped","escape","initClass","FieldNames","fieldNamesParts","fieldNamesPart","parseFieldNames","flatNames","section","MandatoryFieldDetector","tree","visitNode","node","optional","parts","some","child","FieldFinder","pop","PatternNameInjector","parsedPattern","remainingNames","pattern","visitLiteral","visitField","test","_Array$from","_Array$from2","set","attachNameToField","righmostFieldPath","findPath","currentFieldPath","Math","min","commonAncestor","stringify","left","right","newNode","_Array$from3","_Array$from4","FieldRegexpFactory","head","patternParts","fieldNames","regexps","patternPart","fieldNamesSection","createRegexpCore","mandatoryFieldDetector","_Array$from5","_Array$from6","regexp","leftMandatory","containsMandatory","regexpPart","rightMandatory","prefix","substring","injectNames","array","rxOptional","rxName","visitNodes","count","exact","rxSet","rxCount","rxLines","FieldContentParser","regexpSt","xexec","fieldName","unescape","fieldParsers","regexpFactory","fieldHeader","fieldContent","fieldMetadata","createRegexp","_objectSpread","blockId","exec","applicationId","serviceId","receivingLtId","sessionNumber","sequenceNumber","direction","msgType","MsgType","inputTime","InputTime","inputDate","InputDate","bic","Bic","Session","Sequence","outputDate","OutputDate","outputTime","OutputTime","prio","Prio","monitoringField","MonitoringField","obsolescence","Obsolescence","_","hasAllProps","obj","chain","prop","has","without","depthOf","object","level","hasOwnProperty","depth","max","generateJsonDataBlock","blockname","subst","arrayOfBlocks","_data","_data2","_data3","strategy","_data4","_data5","__dirname","stack","targetDir","_ref$isRelativeToScri","isRelativeToScript","sep","initDir","isAbsolute","baseDir","reduce","parentDir","childDir","curDir","mkdirSync","code"],"mappings":"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","file":"static/js/main.72f10f38.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport Col from 'react-bootstrap/Col';\nimport Row from 'react-bootstrap/Row';\nimport OverlayTrigger from 'react-bootstrap/OverlayTrigger'\nimport Tooltip from 'react-bootstrap/Tooltip'\nimport moment from 'moment';\nimport 'moment/locale/pl';\n\nimport './App.css';\n\nconst TYPES = {\n  \"Account number\": {type: \"97\", option: \"A\"},\n  \"Dates\": {type: \"98\", option: \"A\"},\n  \"Currency\": {type: \"19\", option: \"B\"}\n}\n\nconst FIELDS_DESCRIPTION = {\n  \"20\": \"Sender's Reference\",\n  \"38J\": \"Client\",\n  \"83J\": \"Fund\",\n  \"30T\": \"Trade Date\",\n  \"30V\": \"Value Date\",\n  \"36\": \"Exchange Rate\",\n  \"32B\": \"Amount Bought\",\n  \"53A\": \"Delivery Agent\",\n  \"33B\": \"Amount Sold\",\n  \"58J\": \"Beneficiary Institution\",\n  \"92B\": \"Rate\"\n}\n\nconst TOOLTIPS = {\n  \"PAYD\": \"Payment Date/Time\",\n  \"VALU\": \"Value Date/Time\",\n  \"EARL\": \"Earliest Payment Date/Time\",\n  \"FXDT\": \"FX Rate Fixing Date/Time\",\n  \"ENTL\": \"Entitled Amount\",\n  \"TXFR\": \"Tax Free Amount\",\n  'NETT': \"Net Cash Amount\"\n}\n\nclass Details extends Component {\n  render() {\n    return (\n      <Row as=\"dl\">\n        {this.renderAccountsNumber()}\n        {this.renderCurrencyField()}\n        {this.renderDates()}\n        {this.renderCustomField('83', 'J', 'Fund number', (ast) => { return this.getAccountNumberFromFin(ast) })}\n        {this.renderCustomField('58', 'J', 'Nostro number', (ast) => { return this.getAccountNumberFromFin(ast) })}\n        {this.renderField(\"92\", \"B\", (ast) => { return this.renderRate(ast) })}\n        {this.renderField(\"20\", undefined, (ast) => { return ast['Value'] })}\n        {this.renderField(\"83\", 'J', (ast) => { return this.renderIdentification(ast['Party Identification']) })}\n        {this.renderField(\"30\", 'T', (ast) => { return this.renderDate(ast['Date']) })}\n        {this.renderField(\"30\", 'V', (ast) => { return this.renderDate(ast['Date']) })}\n        {this.renderField(\"36\", undefined, (ast) => { return this.renderFloat(ast['Rate']) })}\n        {this.renderField(\"32\", 'B', (ast) => { return this.renderCurrency(ast['Amount'], ast['Currency']) })}\n        {this.renderField(\"33\", 'B', (ast) => { return this.renderCurrency(ast['Amount'], ast['Currency']) })}\n        {this.renderField(\"53\", 'A', (ast) => { return ast['Identifier Code'] })}\n        {this.renderField(\"58\", 'J', (ast) => { return this.renderIdentification(ast['Party Identification'])})}\n      </Row>\n    )\n  }\n\n  renderRate(ast) {\n    return ast['First Currency Code'] + '/' + ast['Second Currency Code'] + ' ' + this.renderFloat(ast['Rate'])\n  }\n\n  renderIdentification(name) {\n    return name.split('\\n').map((item, i) => {\n      return <p key={i}>{item}</p>;\n    })\n  }\n\n  getAccountNumberFromFin(ast) {\n    const identify = ast['Party Identification']\n    return identify.split('\\n').find((line) => { return line.includes('ACCT/') }).split('/')[2]\n  }\n\n  renderDate(dateString) {\n    const date = moment(dateString, \"YYYYMMDD\")\n    return date.format('DD/MM/YYYY') + \" (\" + date.fromNow() + \")\"\n  }\n\n  renderFloat(floatSting, precision = 2) {\n    return parseFloat(floatSting.replace(',', '.')).toFixed(precision)\n  }\n\n  renderCurrency(amount, currency) {\n    return this.renderFloat(amount) + \" \" + currency\n  }\n\n  renderCustomField(type, option, name, mapper) {\n    const fields = this.findType({type: type, option: option})\n\n    return fields.map((field) => {\n      return this.renderType(name, mapper(field.ast))\n    })\n  }\n\n  renderField(type, option, mapper) {\n    const fields = this.findType({type: type, option: option})\n\n    return fields.map((field) => {\n      return this.renderType(FIELDS_DESCRIPTION[[type, option].join('')], mapper(field.ast))\n    })\n  }\n\n  renderCurrencyField() {\n    const types = this.findType(TYPES[\"Currency\"])\n\n    return types.map((type) => {\n      return this.renderType(type.ast[\"Qualifier\"],  this.renderCurrency(type.ast['Amount'], type.ast['Currency'] || type.ast['Currency Code']))\n    })\n  }\n\n  renderDates() {\n    const types = this.findType(TYPES[\"Dates\"])\n\n    return types.map((type) => {\n      const date = moment(type.ast[\"Date\"], \"YYYYMMDD\")\n      return this.renderType(type.ast[\"Qualifier\"], date.format('DD/MM/YYYY') + \" (\" + date.fromNow() + \")\")\n    })\n  }\n\n  renderAccountsNumber() {\n    const types = this.findType(TYPES[\"Account number\"])\n\n    return types.map((type) => {\n      return this.renderType(\"Account Number (\" + type.ast[\"Qualifier\"] + \")\" , type.ast[\"Account Number\"])\n    })\n  }\n\n  renderType(label, value) {\n\n    return (\n      <React.Fragment>\n          <OverlayTrigger\n            placement=\"left\"\n            overlay={\n              <Tooltip>{TOOLTIPS[label] || \"No information\"}</Tooltip>\n            }\n          >\n            <Col as=\"dt\" xs={5}>{label}</Col>\n          </OverlayTrigger>\n        <Col as=\"dd\" xs={7}>{value}</Col>\n      </React.Fragment>\n    )\n  }\n\n  findType(attributes) {\n    const details = this.props.parsedSwift.block4\n    if(details) {\n      return details.filter((element)=> {\n        return element.type === attributes.type && element.option === attributes.option\n      })\n    } else {\n      return []\n    }\n  }\n}\n\nexport default Details;\n","import React, { Component } from 'react';\nimport Col from 'react-bootstrap/Col';\nimport Row from 'react-bootstrap/Row';\nimport Badge from 'react-bootstrap/Badge';\nimport moment from 'moment';\nimport 'moment/locale/pl';\n\nimport './App.css';\n\nclass Validator extends Component {\n  render() {\n    return (\n      <React.Fragment>\n        <Row className=\"center\">\n        <Col md=\"4\" xs={4}><strong>What the order contains</strong></Col>\n        <Col xs={4}>\n          <Badge className=\"mr-sm-2\" variant='success'>Valid</Badge>\n          <Badge variant='danger'>Invalid</Badge>\n        </Col>\n          <Col xs={4}><strong>What it should be</strong></Col>\n        </Row>\n        <hr className=\"col-xs-12\"/>\n        <Row>\n          {this.validateNettAmount()}\n          {this.validatePstaAmount()}\n          {this.validateValueDate()}\n          {this.validateTradeDate()}\n          {this.validateRate()}\n        </Row>\n      </React.Fragment>\n    )\n  }\n\n  validateRate() {\n    let orderRate = this.findType(this.props.orderJSON, '92', 'B', 'EXCH')[0]\n    let rate = this.findType(this.props.transactionJSON, '36')[0]\n    let buy = this.findType(this.props.transactionJSON, '32', 'B')[0]\n    let sell = this.findType(this.props.transactionJSON, '33', 'B')[0]\n\n    if(!rate || !buy || !sell || !orderRate) { return }\n\n    buy = this.renderFloat(buy.ast['Amount'])\n    sell = this.renderFloat(sell.ast['Amount'])\n    rate = this.renderFloat(rate.ast['Rate'])\n    orderRate = this.renderFloat(orderRate.ast['Rate'])\n    const computedRate = (sell / buy).toFixed(2)\n\n    return this.renderType('Rate', orderRate, rate + ' (Calculated: ' + computedRate + ')', rate === orderRate)\n  }\n\n  validateTradeDate() {\n    let orderValue = this.findType(this.props.orderJSON, '98', 'A', 'VALU')[0]\n    let transactionValue = this.findType(this.props.transactionJSON, '30', 'T')[0]\n\n    if(!orderValue || !transactionValue) { return }\n\n    orderValue = orderValue.ast\n    transactionValue = transactionValue.ast\n\n    let orderValueDate = moment(orderValue['Date'], \"YYYYMMDD\")\n    let correctOrderValueDate = moment(orderValue['Date'], \"YYYYMMDD\")\n\n    if(!moment().isAfter(orderValueDate)) { correctOrderValueDate = moment() }\n\n    const validation = correctOrderValueDate.format('YYYYMMDD') === transactionValue['Date']\n\n    return this.renderType(\n      'Trade Date',\n      this.renderDate(orderValueDate),\n      this.renderDate(correctOrderValueDate),\n      validation)\n  }\n\n  validateValueDate() {\n    let orderValue = this.findType(this.props.orderJSON,'98', 'A', 'VALU')[0]\n    let transactionValue = this.findType(this.props.transactionJSON, '30', 'V')[0]\n\n    if(!orderValue || !transactionValue) { return }\n\n    orderValue = orderValue.ast\n    transactionValue = transactionValue.ast\n\n    let orderValueDate = moment(orderValue['Date'], \"YYYYMMDD\")\n    const validation = orderValueDate.format('YYYYMMDD') === transactionValue['Date']\n\n    return this.renderType('Value Date', this.renderDate(orderValueDate), this.renderDate(moment(transactionValue['Date'], 'YYYYMMDD')), validation)\n  }\n\n\n  validatePstaAmount() {\n    let orderValue = this.findType(this.props.orderJSON,'19', 'B', 'PSTA')[0]\n    let transactionValue = this.findType(this.props.transactionJSON, '32', 'B')[0]\n\n    if(!orderValue || !transactionValue) { return }\n\n    orderValue = orderValue.ast\n    transactionValue = transactionValue.ast\n\n    return this.renderAmountValidator(orderValue, transactionValue, 'Buy Currency Amount')\n  }\n\n  validateNettAmount() {\n    let orderValue = this.findType(this.props.orderJSON, '19', 'B', 'NETT')[0]\n    let transactionValue = this.findType(this.props.transactionJSON, '33', 'B')[0]\n\n    if(!orderValue || !transactionValue) { return }\n\n    orderValue = orderValue.ast\n    transactionValue = transactionValue.ast\n\n    return this.renderAmountValidator(orderValue, transactionValue, 'Sell Currency Amount')\n  }\n\n  renderAmountValidator(orderValue, transactionValue, label) {\n    const validation = this.renderFloat(orderValue['Amount']) === this.renderFloat(transactionValue['Amount']) && orderValue['Currency Code'] === transactionValue['Currency']\n    return this.renderType(label, this.renderCurrency(orderValue), this.renderCurrency(transactionValue), validation)\n  }\n\n  renderCurrency(ast) {\n    return this.renderFloat(ast['Amount']) + \" \" + (ast['Currency'] || ast['Currency Code'])\n  }\n\n  renderFloat(floatSting, precision = 2) {\n    return parseFloat(floatSting.replace(',', '.')).toFixed(precision)\n  }\n\n  renderDate(date) {\n    return date.format('DD/MM/YYYY') + \" (\" + date.fromNow() + \")\"\n  }\n\n  renderType(label, valueLeft, valueRight, valid) {\n    const badgeVariant = valid ? 'success' : 'danger'\n\n    return (\n      <React.Fragment>\n        <Col className=\"justify-content-center\" xs={4}>{valueLeft}</Col>\n        <Col className=\"justify-content-center\" xs={4}>\n          <Badge variant={badgeVariant}>{label}</Badge>\n        </Col>\n        <Col className=\"justify-content-center\" xs={4}>{valueRight}</Col>\n      </React.Fragment>\n    )\n  }\n\n  findType(json, type, option, qualifier) {\n    const details = json['block4']\n    if(details) {\n       return details.filter((element)=> {\n         return element.type === type && element.option === option && element.ast[\"Qualifier\"] === qualifier\n       }) || []\n    } else {\n      return []\n    }\n  }\n}\n\nexport default Validator;\n","import React, { Component } from 'react';\nimport Navbar from 'react-bootstrap/Navbar';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Form from 'react-bootstrap/Form';\nimport Swift from 'swift-mock';\nimport JSONPretty from 'react-json-pretty';\nimport Details from './Details';\nimport './App.css';\nimport Validator from \"./Validator\";\nconst parser = new Swift();\n\nconst FALLBACK_FORMAT = \"F01TESTBIC12XXX0360105154\\n\" +\n  \"O5641057130214TESTBIC34XXX26264938281302141757N\\n\" +\n  \"108:2RDRQDHM3WO\"\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      orderJSON: {},\n      transactionJSON: {}\n    }\n\n    this.onOrderChange = this.onOrderChange.bind(this);\n    this.onTransactionChange = this.onTransactionChange.bind(this);\n  }\n\n  onOrderChange(event) {\n    const value = event.target.value\n    this.setState({orderJSON: this.parse(value)})\n  }\n\n  onTransactionChange(event) {\n    const value = event.target.value\n    this.setState({transactionJSON: this.parse(value)})\n  }\n\n  tryParse(value) {\n    value = value.replace(/\\n{2,}/g, '\\n')\n    value = value.replace(/ :/g, '\\n:')\n    value = value.replace(/15A:/g, \"15A: \")\n    value = value.replace(/15B:/g, \"15B: \")\n\n    const lines = value.split('\\n')\n    const block_1 = \"{1:\" + lines[0] + \"}\"\n    const block_2 = \"{2:\" + lines[1] + \"}\"\n    const block_3 = \"{3:{\" + lines[2] + \"}}\"\n    const block_4 = \"{4:\\n\" + lines.slice(3).join('\\n') + \"\\n-}\"\n\n    return parser.parse(block_1 + block_2 + block_3 + block_4)\n  }\n\n  parse(value) {\n    try {\n      return parser.parse(value)\n    } catch (e) {\n      try {\n        return this.tryParse(value)\n      } catch (e) {\n        try {\n          return this.tryParse(FALLBACK_FORMAT + value)\n        } catch (e) {\n          try {\n            return this.tryParse(FALLBACK_FORMAT + \":\\n\" + value)\n          } catch (e) {\n            return e.message\n          }\n        }\n      }\n    }\n  }\n\n  render() {\n    return (\n      <div>\n        <Navbar bg=\"dark\" variant=\"dark\" className=\"mb-2\">\n          <Navbar.Brand href=\"#home\">{'Swift Validator'}</Navbar.Brand>\n          <Navbar.Collapse className=\"justify-content-end\">\n            <Navbar.Text>\n              Version: <strong>{process.env.REACT_APP_GIT_SHA}</strong>\n            </Navbar.Text>\n          </Navbar.Collapse>\n        </Navbar>\n        <Container className=\"mb-0\">\n        <Row>\n          <Col>\n            <Form>\n              <Form.Group controlId=\"exampleForm.ControlTextarea1\">\n                <Form.Control placeholder=\"Swift order\" as=\"textarea\" rows=\"20\" onChange={this.onOrderChange} />\n              </Form.Group>\n            </Form>\n          </Col>\n          <Col>\n            <Form>\n              <Form.Group controlId=\"exampleForm.ControlTextarea1\">\n                <Form.Control placeholder=\"Swift transaction\" as=\"textarea\" rows=\"20\" onChange={this.onTransactionChange} />\n              </Form.Group>\n            </Form>\n          </Col>\n        </Row>\n          <Row>\n            <Col xs={12}>\n              <Validator orderJSON={this.state.orderJSON} transactionJSON={this.state.transactionJSON}/>\n            </Col>\n          </Row>\n          <hr className=\"col-xs-12\"/>\n        <Row>\n          <Col xs={6}>\n            <Details parsedSwift={this.state.orderJSON}></Details>\n          </Col>\n          <Col xs={6}>\n            <Details parsedSwift={this.state.transactionJSON}></Details>\n          </Col>\n        </Row>\n        <Row>\n          <Col xs={6}>\n            <JSONPretty data={this.state.orderJSON} />\n          </Col>\n          <Col xs={6}>\n            <JSONPretty data={this.state.transactionJSON} />\n          </Col>\n        </Row>\n        <Row>\n          <Col>\n            <Form>\n              <Form.Group controlId=\"exampleForm.ControlTextarea1\">\n                <Form.Control placeholder=\"Accounts\" as=\"textarea\" rows=\"5\"/>\n              </Form.Group>\n            </Form>\n          </Col>\n        </Row>\n      </Container>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport 'react-json-pretty/themes/monikai.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n","var _classCallCheck = require(\"/Users/lite/work/swift/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/lite/work/swift/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar fs = require('fs');\n\nvar path = require('path');\n\nvar finParser = require('./finParser.js');\n\nvar mtParser = require('./mtParser.js');\n\nvar block1Parser = require('./block1Parser');\n\nvar block2Parser = require('./block2Parser');\n\nvar messageGenerator = require('./messageGenerator');\n\nvar _require = require('./utils'),\n    Logger = _require.Logger,\n    mkDirByPathSync = _require.mkDirByPathSync;\n\nvar moment = require('moment');\n\nvar patterns = require('./metadata/patterns.json');\n\nvar logger = new Logger();\n\nvar Swift =\n/*#__PURE__*/\nfunction () {\n  \"use strict\";\n\n  function Swift() {\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, Swift);\n\n    if (options.fieldPatterns) {\n      this.fieldPatterns = JSON.parse(fs.readFileSync(path.resolve(process.cwd(), options.fieldPatterns)));\n    } else {\n      this.fieldPatterns = patterns;\n    }\n\n    this.inputFolder = options.in ? path.resolve(process.cwd(), options.in) : path.resolve(process.cwd(), './in');\n    this.outputFolder = options.out ? path.resolve(process.cwd(), options.out) : path.resolve(process.cwd(), './out');\n    logger.setLogLevel(options.logLevel || 0);\n    logger.setElastic(options.elastic || false);\n    this.saveIncomingMessages = options.saveIncomingMessages || false;\n    this.filters = [];\n    this.filtersEvery = [];\n    this.messages = [];\n    this.persistent = options.persistent || true;\n    this.deleteFiles = options.delete || false;\n  }\n\n  _createClass(Swift, [{\n    key: \"cleanMessages\",\n    value: function cleanMessages() {\n      this.messages = [];\n    }\n  }, {\n    key: \"getMessages\",\n    value: function getMessages() {\n      return this.messages;\n    }\n  }, {\n    key: \"cleanListeners\",\n    value: function cleanListeners() {\n      this.filters = [];\n      this.filtersEvery = [];\n    }\n  }, {\n    key: \"on\",\n    value: function on(predicate, callback) {\n      if (typeof predicate !== 'function') {\n        throw new Error('predicate is not a function');\n      }\n\n      if (typeof callback !== 'function') {\n        throw new Error('callback should be a function');\n      }\n\n      logger.debug(\"Create subscriber: \".concat(predicate.toString()));\n      this.filters.push({\n        predicate: predicate,\n        callback: callback\n      });\n    }\n  }, {\n    key: \"onEvery\",\n    value: function onEvery(predicate, callback) {\n      if (typeof predicate !== 'function') {\n        throw new Error('predicate is not a function');\n      }\n\n      if (typeof callback !== 'function') {\n        throw new Error('callback should be a function');\n      }\n\n      logger.debug(\"Create every subscriber: \".concat(predicate.toString()));\n      this.filtersEvery.push({\n        predicate: predicate,\n        callback: callback\n      });\n    }\n  }, {\n    key: \"close\",\n    value: function close() {\n      logger.trace('closing SWIFT client...');\n      return this.watcher.close();\n    }\n  }, {\n    key: \"send\",\n    value: function send(message) {\n      var filenamePrefix = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n      var outPath = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.outputFolder;\n      var out;\n\n      if (typeof message === 'string') {\n        out = message;\n      }\n\n      if (Array.isArray(message)) {\n        out = this.generate(message);\n      }\n\n      if (!out) {\n        throw new Error('output message was not created');\n      }\n\n      if (out instanceof Error) {\n        throw out;\n      }\n\n      var filePath = path.resolve(outPath, \"\".concat(filenamePrefix !== '' ? \"\".concat(filenamePrefix, \"-\") : '').concat(moment().format('YYYY-MM-DD-HH:mm:ss'), \".fin\"));\n      return new Promise(function (resolve, reject) {\n        fs.writeFile(filePath, out, function (err) {\n          if (err) reject(err);else {\n            logger.trace(\"Write outfile \".concat(filePath));\n            resolve(out);\n          }\n        });\n      });\n    }\n  }, {\n    key: \"parse\",\n    value: function parse(swiftMessage) {\n      var _this = this;\n\n      // eslint-disable-next-line no-param-reassign\n      swiftMessage = swiftMessage.replace(/\\r\\n/g, '\\n');\n      var ast = finParser.parse(swiftMessage);\n\n      var humanizeBlocks = function humanizeBlocks(blocks) {\n        Object.keys(blocks).forEach(function (name) {\n          switch (name) {\n            case 'block1':\n              // eslint-disable-next-line no-param-reassign\n              blocks.block1 = block1Parser.parse(blocks.block1.content[0]);\n              break;\n\n            case 'block2':\n              // eslint-disable-next-line no-param-reassign\n              blocks.block2 = block2Parser.parse(blocks.block2.content[0]);\n              break;\n\n            case 'extraBlocks':\n              // eslint-disable-next-line no-param-reassign\n              blocks.extraBlocks = humanizeBlocks(blocks.extraBlocks);\n              break;\n\n            default:\n              // eslint-disable-next-line no-param-reassign\n              blocks[name] = mtParser.parse(blocks[name], _this.fieldPatterns);\n              break;\n          }\n        });\n        return blocks;\n      };\n\n      var res = humanizeBlocks(ast);\n      return res;\n    } // eslint-disable-next-line class-methods-use-this\n\n  }, {\n    key: \"generate\",\n    value: function generate(data) {\n      return messageGenerator(data);\n    }\n  }]);\n\n  return Swift;\n}();\n\nmodule.exports = Swift;","var peg = require('pegjs');\n\nvar syntax = \"\\n    start = blocks:blocks [\\\\n]* {return blocks}\\n\\n    blocks = block*\\n\\n    block = \\\"{\\\" name:$[^:]+ \\\":\\\" content:content \\\"}\\\" {return {name:name, content:content || undefined}}\\n\\n    content = (emptyBlock / block / text )+\\n    \\n    emptyBlock = \\\"{\\\" name:$[^:]+ \\\":}\\\" {return {name:name, content: undefined}}\\n\\n    text = chars:$[^{}]+\\n    \";\n\nmodule.exports.parse = function (input) {\n  var result = peg.generate(syntax).parse(input);\n  var map = {};\n  result.forEach(function (block) {\n    if (map[\"block\".concat(block.name)]) {\n      if (!map.extraBlocks) {\n        map.extraBlocks = {};\n      }\n\n      if (map.extraBlocks[\"block\".concat(block.name)]) {\n        throw Error(\"too much extra blocks with type \".concat(block.name));\n      }\n\n      map.extraBlocks[\"block\".concat(block.name)] = block;\n    } else {\n      map[\"block\".concat(block.name)] = block;\n    }\n  });\n  return map;\n};","var peg = require('pegjs');\n\nvar _require = require('./FieldRegexpFactory'),\n    FieldParser = _require.FieldParser;\n\nvar syntax = \"\\n    start = eol fields:(complexField/simpleField)* {return fields}\\n\\n    simpleField = header:fieldHeader fieldText:content {\\n                          return {\\n                            type: header.type,\\n                            option: header.option,\\n                            fieldValue: fieldText,\\n                            content: header.text+fieldText\\n                          };\\n                        }\\n    \\n    complexField = header:fieldHeader \\\":\\\" qualifier:$(!\\\"/\\\" .)+ \\\"//\\\" fieldText:content {\\n                          var fieldValue = \\\":\\\"+qualifier+\\\"//\\\"+fieldText;\\n                          return {\\n                            type: header.type,\\n                            option: header.option,\\n                            fieldValue: fieldValue,\\n                            content: header.text+fieldValue\\n                          };\\n                        }\\n    \\n    \\n    fieldHeader = \\\":\\\" type:$(digit digit) option:letter? \\\":\\\" {return {type: type, option: option === null ? undefined : option, text: text()}}\\n    \\n    content = text:$(!((eol \\\":\\\")/(eol \\\"-\\\")) .)* ((eol &\\\":\\\")/(eol \\\"-\\\")) {return text}\\n    \\n    eol = \\\"\\\\n\\\"\\n    \\n    digit = [0-9]\\n    \\n    letter = [a-zA-Z]\\n    \";\n\nmodule.exports.parse = function (input, fieldPatterns) {\n  if (typeof input.content[0] === 'object') {\n    var _result = {};\n    input.content.forEach(function (field) {\n      var content = field.content;\n\n      if (Array.isArray(field.content) && field.content.length === 1) {\n        // eslint-disable-next-line prefer-destructuring\n        content = field.content[0];\n      }\n\n      _result[field.name] = content;\n    });\n    return _result;\n  }\n\n  var result = peg.generate(syntax).parse(input.content[0]);\n  var fieldParser = new FieldParser(fieldPatterns);\n  Array.from(result).forEach(function (field, index) {\n    var fieldCode = field.type + (field.option != null ? field.option : '');\n    var parsedField = fieldParser.parse(fieldCode, field.fieldValue);\n    result[index].ast = parsedField;\n  });\n  return result;\n};","var _toArray = require(\"/Users/lite/work/swift/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/toArray\");\n\nvar _classCallCheck = require(\"/Users/lite/work/swift/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/lite/work/swift/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _require = require('xregexp'),\n    XRegExp = _require.XRegExp;\n\nvar peg = require('pegjs');\n\nvar syntax = \"\\nstarts = p:parts {return {type:\\\"sequence\\\", optional:false, parts:p}}\\n\\nparts = part*\\n\\npart = field \\n     / '[' p:parts ']'      {return {type:\\\"sequence\\\", optional:true, parts:p}}\\n     / l:literal            {return {type:\\\"literal\\\", value:l};}\\n\\nfield = n:number s:set       {return {type:\\\"field\\\", count:n, set:s}}\\n      / n:number '!' s:set   {return {type:\\\"field\\\", count:n, set:s, exact:true}}\\n      / lines:number '*' n:number s:set      {return {type:\\\"field\\\", count:n, set:s, lines:lines}}\\n\\nliteral = [^\\\\[\\\\]]\\n\\nnumber = $[0-9]+\\nset = [ndxcaze]\\n\";\nvar parsePattern = peg.generate(syntax).parse;\n\nvar FieldNamesParser =\n/*#__PURE__*/\nfunction () {\n  \"use strict\";\n\n  function FieldNamesParser() {\n    _classCallCheck(this, FieldNamesParser);\n  }\n\n  _createClass(FieldNamesParser, null, [{\n    key: \"initClass\",\n    value: function initClass() {\n      this.fieldNamesRegExp = new XRegExp('\\\\((.*?)\\\\)');\n    }\n  }, {\n    key: \"parseFieldNames\",\n    value: function parseFieldNames(fieldNamesString) {\n      var _this = this;\n\n      if (fieldNamesString === '') {\n        return [];\n      }\n\n      var names = [];\n      this.fieldNamesRegExp.forEach(fieldNamesString, function (match) {\n        var escaped = _this.escape(match[1]);\n\n        return names.push(escaped);\n      });\n\n      if (names.length === 0) {\n        throw new Error(\"Strange field names: \".concat(fieldNamesString));\n      }\n\n      return names;\n    }\n  }, {\n    key: \"escape\",\n    value: function escape(name) {\n      return name.replace(new XRegExp(' ', 'g'), '_');\n    }\n  }, {\n    key: \"unescape\",\n    value: function unescape(name) {\n      return name.replace(new XRegExp('_', 'g'), ' ');\n    }\n  }]);\n\n  return FieldNamesParser;\n}();\n\nFieldNamesParser.initClass();\n\nvar FieldNames = function FieldNames(fieldNamesString) {\n  \"use strict\";\n\n  var _this2 = this;\n\n  _classCallCheck(this, FieldNames);\n\n  var names;\n  this.fieldNamesString = fieldNamesString;\n  var fieldNamesParts = this.fieldNamesString.split('$');\n  this.names = [];\n  Array.from(fieldNamesParts).forEach(function (fieldNamesPart) {\n    if (fieldNamesPart === '') {\n      // special handling of empty list\n      // eslint-disable-next-line no-param-reassign\n      fieldNamesPart = '(Value)';\n    }\n\n    names = FieldNamesParser.parseFieldNames(fieldNamesPart);\n\n    _this2.names.push(names);\n  });\n  this.flatNames = [];\n  Array.from(this.names).forEach(function (section) {\n    Array.from(section).forEach(function (name) {\n      _this2.flatNames.push(name);\n    });\n  });\n};\n\nvar MandatoryFieldDetector =\n/*#__PURE__*/\nfunction () {\n  \"use strict\";\n\n  function MandatoryFieldDetector() {\n    _classCallCheck(this, MandatoryFieldDetector);\n  }\n\n  _createClass(MandatoryFieldDetector, [{\n    key: \"containsMandatory\",\n    value: function containsMandatory(tree) {\n      return this.visitNode(tree);\n    }\n  }, {\n    key: \"visitNode\",\n    value: function visitNode(node) {\n      var _this3 = this;\n\n      switch (node.type) {\n        case 'literal':\n          return false;\n\n        case 'sequence':\n          if (!node.optional) {\n            return Array.from(node.parts).some(function (child) {\n              if (_this3.visitNode(child)) {\n                return true;\n              }\n\n              return false;\n            });\n          }\n\n          return false;\n\n        case 'field':\n          return true;\n\n        default:\n          throw new Error(\"Unknown node type \".concat(node.type, \": \").concat(node));\n      }\n    }\n  }]);\n\n  return MandatoryFieldDetector;\n}(); // Depth-first, right-to-left traverser\n\n\nvar FieldFinder =\n/*#__PURE__*/\nfunction () {\n  \"use strict\";\n\n  function FieldFinder(predicate) {\n    _classCallCheck(this, FieldFinder);\n\n    this.predicate = predicate;\n  }\n\n  _createClass(FieldFinder, [{\n    key: \"findPath\",\n    value: function findPath(tree) {\n      var path = [];\n      this.visitNode(tree, path);\n      return path;\n    }\n  }, {\n    key: \"visitNode\",\n    value: function visitNode(node, path) {\n      switch (node.type) {\n        case 'literal':\n          return false;\n\n        case 'field':\n          if (this.predicate(node)) {\n            path.push(node);\n            return true;\n          }\n\n          return false;\n\n        case 'sequence':\n          path.push(node);\n\n          for (var i = node.parts.length - 1; i >= 0; i -= 1) {\n            var child = node.parts[i];\n\n            if (this.visitNode(child, path)) {\n              return true;\n            }\n          }\n\n          path.pop();\n          return false;\n\n        default:\n          throw new Error(\"Unknown node type \".concat(node.type, \": \").concat(node));\n      }\n    }\n  }]);\n\n  return FieldFinder;\n}();\n\nvar PatternNameInjector =\n/*#__PURE__*/\nfunction () {\n  \"use strict\";\n\n  function PatternNameInjector() {\n    _classCallCheck(this, PatternNameInjector);\n  }\n\n  _createClass(PatternNameInjector, [{\n    key: \"injectNames\",\n    value: function injectNames(names, parsedPattern) {\n      this.remainingNames = names;\n      this.pattern = parsedPattern;\n      var result = this.visitNode(parsedPattern);\n\n      if (this.remainingNames.length > 0) {\n        throw new Error(\"Remaining names after name injection: \".concat(this.remainingNames.toString()));\n      }\n\n      return result;\n    }\n  }, {\n    key: \"visitNode\",\n    value: function visitNode(node) {\n      var _this4 = this;\n\n      switch (node.type) {\n        case 'literal':\n          return this.visitLiteral(node);\n\n        case 'sequence':\n          Array.from(node.parts).forEach(function (child) {\n            _this4.visitNode(child);\n          });\n          return node;\n\n        case 'field':\n          return this.visitField(node);\n\n        default:\n          throw new Error(\"Unknown node type \".concat(node.type, \": \").concat(node));\n      }\n    }\n  }, {\n    key: \"visitLiteral\",\n    value: function visitLiteral(node) {\n      if (node.value === 'N' && this.remainingNames[0] != null && /(_|\\b)sign(_|\\b)/i.test(this.remainingNames[0])) {\n        // the Sign\n        var name; // eslint-disable-next-line prefer-const\n\n        var _Array$from = Array.from(this.remainingNames);\n\n        var _Array$from2 = _toArray(_Array$from);\n\n        name = _Array$from2[0];\n        this.remainingNames = _Array$from2.slice(1);\n        // eslint-disable-next-line no-param-reassign\n        node.name = name;\n      }\n\n      return node;\n    }\n  }, {\n    key: \"visitField\",\n    value: function visitField(node) {\n      if (node.set === 'e') {\n        // space doesnt' get name\n        return node;\n      }\n\n      this.attachNameToField(node);\n      return node;\n    }\n  }, {\n    key: \"attachNameToField\",\n    value: function attachNameToField(node) {\n      var name;\n\n      if (this.remainingNames.length === 0) {\n        return;\n      }\n\n      if (this.remainingNames.length === 1) {\n        var righmostFieldPath = new FieldFinder(function () {\n          return true;\n        }).findPath(this.pattern);\n        var currentFieldPath = new FieldFinder(function (field) {\n          return field === node;\n        }).findPath(this.pattern);\n        var length = Math.min(righmostFieldPath.length, currentFieldPath.length);\n        var i = 0;\n        var commonAncestor = null;\n\n        while (i < length && righmostFieldPath[i] === currentFieldPath[i]) {\n          commonAncestor = righmostFieldPath[i];\n          i += 1;\n        }\n\n        if (i < length) {\n          // rewrite the pattern tree to name the remaining fields as a sequence\n          if (commonAncestor.type !== 'sequence') {\n            throw new Error(\"Common ancestor should be a sequence: \".concat(JSON.stringify(commonAncestor)));\n          }\n\n          var left = commonAncestor.parts.indexOf(currentFieldPath[i]);\n          var right = commonAncestor.parts.indexOf(righmostFieldPath[i]);\n\n          if (left === -1 || right === -1) {\n            throw new Error(\"Left: \".concat(left, \" Right: \").concat(right));\n          }\n\n          var newNode = {\n            type: 'sequence',\n            optional: false,\n            parts: commonAncestor.parts.slice(left, +right + 1 || undefined)\n          };\n          commonAncestor.parts = commonAncestor.parts.slice(0, left).concat([newNode]).concat(commonAncestor.parts.slice(right + 1)); // eslint-disable-next-line no-param-reassign\n\n          node = newNode;\n        }\n      } // eslint-disable-next-line prefer-const\n\n\n      var _Array$from3 = Array.from(this.remainingNames);\n\n      var _Array$from4 = _toArray(_Array$from3);\n\n      name = _Array$from4[0];\n      this.remainingNames = _Array$from4.slice(1);\n      // eslint-disable-next-line no-param-reassign\n      node.name = name;\n    }\n  }]);\n\n  return PatternNameInjector;\n}();\n\nvar FieldRegexpFactory =\n/*#__PURE__*/\nfunction () {\n  \"use strict\";\n\n  function FieldRegexpFactory() {\n    _classCallCheck(this, FieldRegexpFactory);\n  }\n\n  _createClass(FieldRegexpFactory, [{\n    key: \"createRegexp\",\n    value: function createRegexp(pattern, fieldNamesString) {\n      var head;\n      var patternParts = pattern.split('$');\n      var fieldNames = new FieldNames(fieldNamesString);\n\n      if (patternParts.length !== fieldNames.names.length) {\n        throw new Error('Different count of lines in pattern and field names.');\n      }\n\n      var regexps = [];\n\n      for (var i = 0; i < patternParts.length; i += 1) {\n        var patternPart = patternParts[i];\n        var fieldNamesSection = fieldNames.names[i];\n        regexps.push(this.createRegexpCore(patternPart, fieldNamesSection));\n      }\n\n      var mandatoryFieldDetector = new MandatoryFieldDetector(); // eslint-disable-next-line prefer-const\n\n      var _Array$from5 = Array.from(regexps);\n\n      var _Array$from6 = _toArray(_Array$from5);\n\n      head = _Array$from6[0];\n      regexps = _Array$from6.slice(1);\n      var result = head.regexp;\n      var leftMandatory = mandatoryFieldDetector.containsMandatory(head.tree);\n      Array.from(regexps).forEach(function (regexpPart) {\n        var rightMandatory = mandatoryFieldDetector.containsMandatory(regexpPart.tree);\n\n        if (leftMandatory && rightMandatory) {\n          result = \"\".concat(result, \"\\n\").concat(regexpPart.regexp);\n        } else {\n          // not 100% correct -- the newlines should be parts of the sequences\n          // -- [a]$b --> (a\\n)?b instead of (a)?(\\n)?b\n          result += \"(\\n)?\".concat(regexpPart.regexp);\n        }\n      });\n      result = \"^\".concat(result, \"$\");\n      return result;\n    }\n  }, {\n    key: \"createRegexpCore\",\n    value: function createRegexpCore(pattern, fieldNames) {\n      var prefix;\n\n      if (pattern[0] === ':') {\n        // make the leading colon optional not to enforce it in the field value\n        prefix = ':?'; // eslint-disable-next-line no-param-reassign\n\n        pattern = pattern.substring(1);\n      }\n\n      var parsedPattern = parsePattern(pattern);\n      var injector = new PatternNameInjector();\n      injector.injectNames(fieldNames, parsedPattern);\n      var regexp = this.visitNode(parsedPattern);\n\n      if (prefix != null) {\n        regexp = prefix + regexp;\n      }\n\n      return {\n        tree: parsedPattern,\n        regexp: regexp\n      };\n    }\n  }, {\n    key: \"visitNodes\",\n    value: function visitNodes(array) {\n      var _this5 = this;\n\n      var result = Array.from(array).map(function (node) {\n        return _this5.visitNode(node);\n      }).join('');\n      return result;\n    }\n  }, {\n    key: \"visitNode\",\n    value: function visitNode(node) {\n      switch (node.type) {\n        case 'literal':\n          return this.visitLiteral(node);\n\n        case 'sequence':\n          {\n            var rxOptional = node.optional ? '?' : '';\n            var rxName = node.name != null ? \"?<\".concat(node.name, \">\") : '';\n            var value = this.visitNodes(node.parts);\n\n            if (!node.optional && node.name == null) {\n              // no need to add parentheses\n              return value;\n            }\n\n            if (node.parts.length === 1 && node.name == null) {\n              if (node.optional && /^\\(.*\\)$/.test(value)) {\n                return \"\".concat(value, \"?\"); // there are already parentheses\n              }\n            }\n\n            return \"(\".concat(rxName).concat(value, \")\").concat(rxOptional);\n          }\n\n        case 'field':\n          return this.visitField(node);\n\n        default:\n          throw new Error(\"Unknown node type \".concat(node.type, \": \").concat(node));\n      }\n    } // eslint-disable-next-line class-methods-use-this\n\n  }, {\n    key: \"visitField\",\n    value: function visitField(field) {\n      var result;\n      var count = field.count;\n      var set = field.set;\n      var lines = field.lines != null ? field.lines : 1;\n      var exact = field.exact != null ? field.exact : false;\n\n      var rxSet = function () {\n        switch (set) {\n          case 'e':\n            return ' ';\n\n          case 'z':\n            return '[\\\\s\\\\S]';\n\n          default:\n            return '.';\n        }\n      }();\n\n      var rxCount = exact ? \"{\".concat(count, \"}\") : \"{1,\".concat(count, \"}\");\n      var rxName = field.name != null ? \"?<\".concat(field.name, \">\") : '';\n      var rxLines = lines > 1 ? \"(\\n\".concat(rxSet).concat(rxCount, \"){0,\").concat(lines - 1, \"}\") : '';\n\n      if (rxName !== '') {\n        result = \"(\".concat(rxName).concat(rxSet).concat(rxCount).concat(rxLines, \")\");\n      } else {\n        result = \"\".concat(rxSet).concat(rxCount).concat(rxLines);\n      }\n\n      return result;\n    } // eslint-disable-next-line class-methods-use-this\n\n  }, {\n    key: \"visitLiteral\",\n    value: function visitLiteral(node) {\n      if (node.name != null) {\n        return \"(?<\".concat(node.name, \">\").concat(node.value, \")\");\n      }\n\n      return node.value;\n    }\n  }]);\n\n  return FieldRegexpFactory;\n}();\n\nvar FieldContentParser =\n/*#__PURE__*/\nfunction () {\n  \"use strict\";\n\n  function FieldContentParser(regexpSt, fieldNames) {\n    _classCallCheck(this, FieldContentParser);\n\n    this.regexpSt = regexpSt;\n    this.fieldNames = fieldNames;\n    this.regexp = new XRegExp(this.regexpSt);\n  }\n\n  _createClass(FieldContentParser, [{\n    key: \"parse\",\n    value: function parse(fieldValue) {\n      var match = this.regexp.xexec(fieldValue);\n\n      if (match == null) {\n        throw new Error(\"Unable to parse '\".concat(fieldValue, \"' with regexp '\").concat(this.regexpSt, \"'.\"));\n      }\n\n      var result = {};\n      Array.from(this.fieldNames.flatNames).forEach(function (fieldName) {\n        if (match[fieldName] != null) {\n          result[FieldNamesParser.unescape(fieldName)] = match[fieldName];\n        }\n      });\n      return result;\n    }\n  }]);\n\n  return FieldContentParser;\n}();\n\nvar FieldParser =\n/*#__PURE__*/\nfunction () {\n  \"use strict\";\n\n  function FieldParser(fieldPatterns) {\n    _classCallCheck(this, FieldParser);\n\n    this.fieldPatterns = fieldPatterns;\n    this.fieldParsers = {};\n    this.regexpFactory = new FieldRegexpFactory();\n  }\n\n  _createClass(FieldParser, [{\n    key: \"parse\",\n    value: function parse(fieldHeader, fieldContent) {\n      if (this.fieldParsers[fieldHeader] == null) {\n        var fieldMetadata = this.fieldPatterns[fieldHeader];\n\n        if (fieldMetadata == null) {\n          throw new Error(\"Metadata not found for field \".concat(fieldHeader, \".\"));\n        }\n\n        if (fieldHeader === '77E') {\n          throw new Error('Parsing of field 77E is not supported.'); // this field has a very strange pattern and\n          // multiple fields with the same name\n        }\n\n        var regexpSt = this.regexpFactory.createRegexp(fieldMetadata.pattern, fieldMetadata.fieldNames); // eslint-disable-next-line max-len\n\n        this.fieldParsers[fieldHeader] = new FieldContentParser(regexpSt, new FieldNames(fieldMetadata.fieldNames));\n      }\n\n      var parser = this.fieldParsers[fieldHeader];\n      var result = parser.parse(fieldContent);\n      return result;\n    }\n  }]);\n\n  return FieldParser;\n}();\n/* eslint-disable no-useless-escape */\n// n - [0-9] -   Digits\n// d - [0-9]+,[0-9]* problem with total length   -   Digits with decimal comma\n// a - [A-Z]  -   Uppercase letters\n// c - [0-9A-Z] -   Uppercase alphanumeric\n// e - [ ]   -   Space\n// x - [0-9a-zA-Z/\\-\\?:\\(\\)\\.,&apos;\\+ ]   -   SWIFT character set\n// z - [0-9a-zA-Z!&quot;%&amp;\\*;&lt;&gt; \\.,\\(\\)/=&apos;\\+:\\?@#&#x0d;&#x0a;\\{\\-_] - ext. charset\n// //h      -   Uppercase hexadecimal\n// //y      -   Upper case level A ISO 9735 characters\n//\n//\n// specials:\n// ISIN\n// N\n// //\n// ,\n// /\n//\n// new line:\n// $\n\n\nmodule.exports.FieldRegexpFactory = FieldRegexpFactory;\nmodule.exports.FieldFinder = FieldFinder;\nmodule.exports.FieldNamesParser = FieldNamesParser;\nmodule.exports.FieldContentParser = FieldContentParser;\nmodule.exports.FieldParser = FieldParser;\nmodule.exports.FieldNames = FieldNames;","var _objectSpread = require(\"/Users/lite/work/swift/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/objectSpread\");\n\nmodule.exports.parse = function (input) {\n  var result = {\n    blockId: 1\n  };\n  result.content = input;\n  var pattern = /(.)(..)(.{12})(....)(.*)/;\n  var match = pattern.exec(input);\n\n  if (match != null) {\n    result = _objectSpread({}, result, {\n      applicationId: match[1],\n      serviceId: match[2],\n      receivingLtId: match[3],\n      sessionNumber: match[4],\n      sequenceNumber: match[5]\n    });\n  }\n\n  return result;\n};","var _require = require('xregexp'),\n    XRegExp = _require.XRegExp;\n\nmodule.exports.parse = function (input) {\n  var result = {};\n  result.content = input;\n  result.blockId = 2;\n  var pattern = new XRegExp('O(?<MsgType>\\\\d{3})(?<InputTime>\\\\d{4})(?<InputDate>\\\\d{6})(?<Bic>\\\\w*?)(?<Session>\\\\w{4})(?<Sequence>\\\\w{6})(?<OutputDate>\\\\d{6})(?<OutputTime>\\\\d{4})(?<Prio>[SNU])');\n  var match = pattern.xexec(input);\n\n  if (match != null) {\n    result.direction = 'O';\n    result.msgType = match.MsgType;\n    result.inputTime = match.InputTime;\n    result.inputDate = match.InputDate;\n    result.bic = match.Bic;\n    result.sessionNumber = match.Session;\n    result.sequenceNumber = match.Sequence;\n    result.outputDate = match.OutputDate;\n    result.outputTime = match.OutputTime;\n    result.prio = match.Prio;\n    return result;\n  }\n\n  pattern = new XRegExp('I(?<MsgType>\\\\d{3})(?<Bic>\\\\w{7,12})(?<Prio>[SNU])(?<MonitoringField>[123])?(?<Obsolescence>\\\\d{3})?');\n  match = pattern.xexec(input);\n\n  if (match != null) {\n    result.direction = 'I';\n    result.msgType = match.MsgType;\n    result.bic = match.Bic;\n    result.prio = match.Prio;\n    result.monitoringField = match.MonitoringField;\n    result.obsolescence = match.Obsolescence;\n  }\n\n  return result;\n};","var _ = require('lodash');\n/**\n * Generate Swift message from blocks. Blocks order is the same as in array. No\n * [{block: 1, data: value},{block:2, data:2}]\n * @param {array} arrayOfBlocks\n * @returns {*}\n */\n\n\nfunction hasAllProps(obj, props) {\n  var propsTrue = _.chain(props).map(function (prop) {\n    return _.has(obj, prop);\n  }).without(false).value();\n\n  return propsTrue.length === props.length;\n}\n\nvar depthOf = function depthOf(object) {\n  var level = 1;\n  Object.keys(object).forEach(function (key) {\n    // eslint-disable-next-line no-prototype-builtins\n    if (object.hasOwnProperty(key) && typeof object[key] === 'object') {\n      var depth = depthOf(object[key]) + 1;\n      level = Math.max(depth, level);\n    }\n  });\n  return level;\n};\n\nfunction generateJsonDataBlock(data, blockname) {\n  var subst = '';\n\n  if (depthOf(data) !== 1) {\n    throw new Error(\"block data \".concat(blockname, \" has several depth level, but should 1\"));\n  }\n\n  Object.keys(data).forEach(function (key) {\n    if (data[key] === undefined) {\n      subst += \"{\".concat(key, \":}\");\n    } else {\n      subst += \"{\".concat(key, \":\").concat(data[key], \"}\");\n    }\n  });\n  return \"{\".concat(blockname, \":\").concat(subst, \"}\");\n}\n\nmodule.exports = function (arrayOfBlocks) {\n  var message = '';\n\n  try {\n    if (!Array.isArray(arrayOfBlocks)) {\n      throw new Error('invalid swift message format');\n    }\n\n    arrayOfBlocks.forEach(function (block) {\n      if (!block.block || !block.data) {\n        throw new Error('invalid swift message block');\n      } // let data;\n\n\n      switch (block.block) {\n        case 1:\n          {\n            /**\n             * generate block 1\n             */\n            var data = block.data;\n            /**\n             * if data is string, than take it as is\n             */\n\n            if (typeof data === 'string') {\n              message += \"{1:\".concat(data, \"}\");\n              break;\n            }\n            /**\n             * if data is object, validate that we have required keys and generate block\n             */\n\n\n            if (typeof data === 'object') {\n              if (hasAllProps(data, ['applicationId', 'serviceId', 'receivingLtId', 'sessionNumber', 'sequenceNumber'])) {\n                message += \"{1:\".concat(data.applicationId).concat(data.serviceId).concat(data.receivingLtId).concat(data.sessionNumber).concat(data.sequenceNumber, \"}\");\n                break;\n              }\n\n              throw new Error(\"Invalid data for block 1. something is missing \".concat(JSON.stringify(data), \"}\"));\n            }\n\n            throw new Error('Invalid block 1 format. It must be a string or object with required fields');\n          }\n\n        case 2:\n          {\n            /**\n             * generate block 2\n             */\n            var _data = block.data;\n            /**\n             * if data is string, than take it as is\n             */\n\n            if (typeof _data === 'string') {\n              message += \"{2:\".concat(_data, \"}\");\n              break;\n            }\n            /**\n             * if data is object, validate that we have required keys and generate block\n             */\n\n\n            if (typeof _data === 'object') {\n              if (hasAllProps(_data, ['direction', 'msgType', 'bic', 'prio'])) {\n                message += \"{2:\".concat(_data.direction).concat(_data.msgType).concat(_data.bic).concat(_data.prio, \"}\");\n                break;\n              }\n\n              throw new Error(\"Invalid data for block 2. something is missing \".concat(JSON.stringify(_data)));\n            }\n\n            throw new Error('Invalid block 2 format. It must be a string or object with required fields');\n          }\n\n        case 3:\n          {\n            /**\n             * generate block 3\n             */\n            var _data2 = block.data;\n            /**\n             * block 3 should be an object with key/value pairs\n             */\n\n            if (typeof block === 'object') {\n              message += generateJsonDataBlock(_data2, 3);\n              break;\n            }\n\n            throw new Error('Invalid block 3 format. It must be a object with key/value pairs');\n          }\n\n        case 4:\n          {\n            /**\n             * generate block 4\n             */\n            var _data3 = block.data; // eslint-disable-next-line no-param-reassign\n\n            block.strategy = block.strategy || 'content';\n            /**\n             * block 4 may be an array with fields\n             */\n\n            if (Array.isArray(_data3)) {\n              var subst = '';\n\n              _data3.forEach(function (field) {\n                if (block.strategy === 'content') {\n                  subst += \"\".concat(field.content, \"\\n\");\n                }\n\n                if (block.strategy === 'combine') {\n                  subst += \":\".concat(field.type).concat(field.option, \":\").concat(field.fieldValue, \"\\n\");\n                }\n              });\n\n              message += \"{4:\\n\".concat(subst, \"-}\");\n              break;\n            }\n            /**\n             * block 3 may be an object with key/value pairs\n             */\n\n\n            if (typeof block === 'object') {\n              message += generateJsonDataBlock(_data3, 4);\n              break;\n            }\n\n            throw new Error('Invalid block 4 format. It must be a object with key/value pairs or array');\n          }\n\n        case 5:\n          {\n            /**\n             * generate block 5\n             */\n            var _data4 = block.data;\n            /**\n             * block 5 should be an object with key/value pairs\n             */\n\n            if (typeof block === 'object') {\n              message += generateJsonDataBlock(_data4, 5);\n              break;\n            }\n\n            throw new Error('Invalid block 5 format. It must be a object with key/value pairs');\n          }\n\n        case 'S':\n          {\n            /**\n             * generate block S\n             */\n            var _data5 = block.data;\n            /**\n             * block S should be an object with key/value pairs\n             */\n\n            if (typeof block === 'object') {\n              message += generateJsonDataBlock(_data5, 'S');\n              break;\n            }\n\n            throw new Error('Invalid block S format. It must be a object with key/value pairs');\n          }\n\n        default:\n          throw new Error(\"invalid block type \".concat(block.block));\n      }\n    });\n    return message;\n  } catch (err) {\n    return err;\n  }\n};","var _classCallCheck = require(\"/Users/lite/work/swift/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/lite/work/swift/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar fs = require('fs');\n\nvar path = require('path');\n\nvar Logger =\n/*#__PURE__*/\nfunction () {\n  \"use strict\";\n\n  function Logger() {\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, Logger);\n\n    this.level = options.level || 0;\n    this.elastic = options.elastic || false;\n  }\n\n  _createClass(Logger, [{\n    key: \"setLogLevel\",\n    value: function setLogLevel(level) {\n      this.level = level;\n    }\n  }, {\n    key: \"setElastic\",\n    value: function setElastic(elastic) {\n      this.elastic = elastic;\n    }\n  }, {\n    key: \"trace\",\n    value: function trace(message) {\n      if (this.level > 0) {\n        if (!this.elastic) {\n          console.log(message);\n          return;\n        }\n\n        if (typeof message === 'object') {\n          // eslint-disable-next-line no-param-reassign\n          message = JSON.stringify(message, null, 2);\n        } // eslint-disable-next-line no-console\n\n\n        console.log(JSON.stringify({\n          level: 'INFO',\n          message: message\n        }));\n      }\n    }\n  }, {\n    key: \"debug\",\n    value: function debug(message) {\n      if (this.level > 1) {\n        if (!this.elastic) {\n          console.log(message);\n          return;\n        }\n\n        if (typeof message === 'object') {\n          // eslint-disable-next-line no-param-reassign\n          message = JSON.stringify(message, null, 2);\n        } // eslint-disable-next-line no-console\n\n\n        console.log(JSON.stringify({\n          level: 'DEBUG',\n          message: message\n        }));\n      }\n    } // eslint-disable-next-line class-methods-use-this\n\n  }, {\n    key: \"error\",\n    value: function error(message) {\n      if (!this.elastic) {\n        console.log(message);\n        return;\n      }\n\n      if (message instanceof Error) {\n        // eslint-disable-next-line no-param-reassign\n        message = {\n          message: message.message,\n          stack: message.stack\n        };\n      }\n\n      if (typeof message === 'object') {\n        // eslint-disable-next-line no-param-reassign\n        message = JSON.stringify(message, null, 2);\n      }\n\n      console.log(JSON.stringify({\n        level: 'ERROR',\n        message: message\n      }));\n    }\n  }]);\n\n  return Logger;\n}();\n\nmodule.exports.Logger = Logger;\n\nmodule.exports.mkDirByPathSync = function (targetDir) {\n  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n      _ref$isRelativeToScri = _ref.isRelativeToScript,\n      isRelativeToScript = _ref$isRelativeToScri === void 0 ? false : _ref$isRelativeToScri;\n\n  var sep = path.sep;\n  var initDir = path.isAbsolute(targetDir) ? sep : '';\n  var baseDir = isRelativeToScript ? __dirname : '.';\n  targetDir.split(sep).reduce(function (parentDir, childDir) {\n    var curDir = path.resolve(baseDir, parentDir, childDir);\n\n    if (curDir !== '/') {\n      try {\n        fs.mkdirSync(curDir);\n      } catch (err) {\n        if (err.code !== 'EEXIST') {\n          throw err;\n        }\n      }\n    }\n\n    return curDir;\n  }, initDir);\n};"],"sourceRoot":""}